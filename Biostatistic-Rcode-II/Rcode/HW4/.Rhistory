x = "Observation Number",
y = "DFBETAs")
#2c
avg_hat_value <- mean(hat_values)
cutoff_hat_value <- 2 * avg_hat_value
n <- nrow(data)
cutoff_dfbeta <- 2 / sqrt(n)
influential_hat <- which(hat_values > cutoff_hat_value)
influential_dfbeta <- which(abs(dfbetas_data$DFBETAs_sysBP) > cutoff_dfbeta)
all_influential <- union(influential_hat, influential_dfbeta)
influential_observations <- data[all_influential, c("Observation", "sysBP")]
print(influential_observations)
#2d
rows_to_exclude <- which(data$Observation %in% c(1938, 3027))
data_excluded <- data[-rows_to_exclude, ]
#write.csv(data_excluded, "data_excluded.csv", row.names = FALSE)
model_excluded <- glm(TenYearCHD ~ sysBP, data = data_excluded, family = binomial())
summary(model_excluded)
coef_original <- coef(model)["sysBP"]
coef_excluded <- coef(model_excluded)["sysBP"]
print(paste("Original sysBP Coefficient:", coef_original))
print(paste("Excluded sysBP Coefficient:", coef_excluded))
# Change in coefficient
change_in_coef <- coef_excluded - coef_original
print(paste("Change in sysBP Coefficient:", change_in_coef))
#3
# Model A: TenYearCHD ~ sysBP
modelA <- glm(TenYearCHD ~ sysBP, data = data_excluded, family = binomial())
summary(modelA)
# Model B: TenYearCHD ~ sysBP + Age
modelB <- glm(TenYearCHD ~ sysBP + age, data = data_excluded, family = binomial())
summary(modelB)
# Model C: TenYearCHD ~ Age + Sex
# Assuming 'male' is the column representing sex, with 1 for male and 0 for female
modelC <- glm(TenYearCHD ~ age + factor(male), data = data_excluded, family = binomial())
summary(modelC)
# Calculate AIC, BIC for each model
aicA <- AIC(modelA)
bicA <- BIC(modelA)
aicB <- AIC(modelB)
bicB <- BIC(modelB)
aicC <- AIC(modelC)
bicC <- BIC(modelC)
#Somer D
library(pROC)
roc_A <- roc(data_excluded$TenYearCHD, fitted(modelA))
somer_d_A <- 2 * auc(roc_A) - 1
roc_B <- roc(data_excluded$TenYearCHD, fitted(modelB))
somer_d_B <- 2 * auc(roc_B) - 1
roc_C <- roc(data_excluded$TenYearCHD, fitted(modelC))
somer_d_C <- 2 * auc(roc_C) - 1
print(paste("Somer's D for Model A:", somer_d_A))
print(paste("Somer's D for Model B:", somer_d_B))
print(paste("Somer's D for Model C:", somer_d_C))
#Gen_Rsq
# Calculate log-likelihood for the full model
logLik_full_A <- logLik(modelA)
logLik_full_B <- logLik(modelB)
logLik_full_C <- logLik(modelC)
# Fit a null model (intercept only)
model_null <- glm(TenYearCHD ~ 1, family = binomial, data = data_excluded)
logLik_null <- logLik(model_null)
likelihood_ratioA <- 2 * (logLik_full_A - logLik_null)
likelihood_ratioB <- 2 * (logLik_full_B - logLik_null)
likelihood_ratioC <- 2 * (logLik_full_C - logLik_null)
n <- nrow(data_excluded)
generalized_R2_A <- 1 - exp(-likelihood_ratioA / n)
generalized_R2_B <- 1 - exp(-likelihood_ratioB / n)
generalized_R2_C <- 1 - exp(-likelihood_ratioC / n)
print(paste("Generalized R^2 for Model A:", generalized_R2_A))
print(paste("Generalized R^2 for Model B:", generalized_R2_B))
print(paste("Generalized R^2 for Model C:", generalized_R2_C))
#Tua
# Using cor.test to calculate Kendall's Tau
y_pred_numericA <- predict(modelA, type = "response")
y_true <- data_excluded$TenYearCHD
tau_a <- cor.test(y_pred_numericA, as.numeric(y_true), method="kendall")
y_pred_numericB <- predict(modelB, type = "response")
tau_b <- cor.test(y_pred_numericB, as.numeric(y_true), method="kendall")
y_pred_numericC <- predict(modelC, type = "response")
tau_c <- cor.test(y_pred_numericC, as.numeric(y_true), method="kendall")
print(tau_a$estimate)
print(tau_b$estimate)
print(tau_c$estimate)
#Cindec
roc_resultA <- roc(response=y_true, predictor=y_pred_numericA)
c_indexA <- auc(roc_resultA)
roc_resultB <- roc(response=y_true, predictor=y_pred_numericB)
c_indexB <- auc(roc_resultB)
roc_resultC <- roc(response=y_true, predictor=y_pred_numericC)
c_indexC <- auc(roc_resultC)
print(c_indexA)
print(c_indexB)
print(c_indexC)
#Gamma
library(DescTools)
y_pred_A <- predict(modelA, type = "response")
y_pred_B <- predict(modelB, type = "response")
y_pred_C <- predict(modelC, type = "response")
y_true <- data_excluded$TenYearCHD
y_true_numeric <- as.numeric(y_true)
gamma_A <- Gamma(y_pred_A, y_true_numeric)
y_true_numeric <- as.numeric(y_true)
gamma_A <- Gamma(y_pred_A, y_true_numeric)
gamma_A <- Gamma(y_pred_A)
y_true_numeric <- as.factor(y_true)
gamma_A <- Gamma(y_pred_A, y_true_numeric)
print(paste("Gamma for Model A:", gamma_A))
#Gamma
library(DescTools)
y_pred_A <- predict(modelA, type = "response")
y_pred_B <- predict(modelB, type = "response")
y_pred_C <- predict(modelC, type = "response")
y_true <- data_excluded$TenYearCHD
y_true_numeric <- as.numeric(y_true)
gamma_A <- Gamma(y_pred_A, y_true_numeric)
print(paste("Gamma for Model A:", gamma_A))
#Gamma
library(DescTools)
y_pred_A <- predict(modelA, type = "response")
y_pred_B <- predict(modelB, type = "response")
y_pred_C <- predict(modelC, type = "response")
y_true <- data_excluded$TenYearCHD
y_true_numeric <- as.numeric(y_true)
gamma_A <- Gamma(y_pred_A, y_true_numeric)
print(paste("Gamma for Model A:", gamma_A))
# Set working path
getwd()
setwd("/Users/kaiyangqian/Documents/Courses/Biostatistic Method II/Rcode/HW4")
# Load the data
data <- read.csv("/Users/kaiyangqian/Documents/Courses/Biostatistic Method II/Rcode/HW4/framingham_Homework4.csv")
data <- na.omit(data)
data$male <- as.factor(replace(data$male, data$male == "Male", 1))
data$male <- factor(data$male, levels = c(0, 1), labels = c("Female", "Male"))
data$TenYearCHD <- as.factor(replace(data$TenYearCHD, data$TenYearCHD == "No", 0))
data$TenYearCHD <- factor(data$TenYearCHD, levels = c(0, 1), labels = c("No", "Yes"))
data$currentSmoker <- factor(data$currentSmoker,levels = c(0, 1), labels = c("No", "Yes"))
summary(data)
#2a
library(ggplot2)
model <- glm(TenYearCHD ~ sysBP, data = data, family = binomial())
summary(model)
hat_values <- hatvalues(model)
plot_data <- data.frame(Observation = 1:nrow(data), HatValues = hat_values)
ggplot(plot_data, aes(x = Observation, y = HatValues)) +
geom_point() +
theme_minimal() +
labs(title = "Hat Matrix Diagonal vs. Observation Number",
x = "Observation Number",
y = "Hat Matrix Diagonal")
#2b
dfbetas <- dfbetas(model)
dfbetas_data <- data.frame(Observation = 1:nrow(data), DFBETAs_sysBP = dfbetas[, 2])
library(ggplot2)
ggplot(dfbetas_data, aes(x = Observation, y = DFBETAs_sysBP)) +
geom_point() +
theme_minimal() +
labs(title = "DFBETAs for sysBP vs. Observation Number",
x = "Observation Number",
y = "DFBETAs")
#2c
avg_hat_value <- mean(hat_values)
cutoff_hat_value <- 2 * avg_hat_value
n <- nrow(data)
cutoff_dfbeta <- 2 / sqrt(n)
influential_hat <- which(hat_values > cutoff_hat_value)
influential_dfbeta <- which(abs(dfbetas_data$DFBETAs_sysBP) > cutoff_dfbeta)
all_influential <- union(influential_hat, influential_dfbeta)
influential_observations <- data[all_influential, c("Observation", "sysBP")]
print(influential_observations)
#2d
rows_to_exclude <- which(data$Observation %in% c(1938, 3027))
data_excluded <- data[-rows_to_exclude, ]
#write.csv(data_excluded, "data_excluded.csv", row.names = FALSE)
model_excluded <- glm(TenYearCHD ~ sysBP, data = data_excluded, family = binomial())
summary(model_excluded)
coef_original <- coef(model)["sysBP"]
coef_excluded <- coef(model_excluded)["sysBP"]
print(paste("Original sysBP Coefficient:", coef_original))
print(paste("Excluded sysBP Coefficient:", coef_excluded))
# Change in coefficient
change_in_coef <- coef_excluded - coef_original
print(paste("Change in sysBP Coefficient:", change_in_coef))
#3
# Model A: TenYearCHD ~ sysBP
modelA <- glm(TenYearCHD ~ sysBP, data = data_excluded, family = binomial())
summary(modelA)
# Model B: TenYearCHD ~ sysBP + Age
modelB <- glm(TenYearCHD ~ sysBP + age, data = data_excluded, family = binomial())
summary(modelB)
# Model C: TenYearCHD ~ Age + Sex
# Assuming 'male' is the column representing sex, with 1 for male and 0 for female
modelC <- glm(TenYearCHD ~ age + factor(male), data = data_excluded, family = binomial())
summary(modelC)
# Calculate AIC, BIC for each model
aicA <- AIC(modelA)
bicA <- BIC(modelA)
aicB <- AIC(modelB)
bicB <- BIC(modelB)
aicC <- AIC(modelC)
bicC <- BIC(modelC)
#Somer D
library(pROC)
roc_A <- roc(data_excluded$TenYearCHD, fitted(modelA))
somer_d_A <- 2 * auc(roc_A) - 1
roc_B <- roc(data_excluded$TenYearCHD, fitted(modelB))
somer_d_B <- 2 * auc(roc_B) - 1
roc_C <- roc(data_excluded$TenYearCHD, fitted(modelC))
somer_d_C <- 2 * auc(roc_C) - 1
print(paste("Somer's D for Model A:", somer_d_A))
print(paste("Somer's D for Model B:", somer_d_B))
print(paste("Somer's D for Model C:", somer_d_C))
#Gen_Rsq
# Calculate log-likelihood for the full model
logLik_full_A <- logLik(modelA)
logLik_full_B <- logLik(modelB)
logLik_full_C <- logLik(modelC)
# Fit a null model (intercept only)
model_null <- glm(TenYearCHD ~ 1, family = binomial, data = data_excluded)
logLik_null <- logLik(model_null)
likelihood_ratioA <- 2 * (logLik_full_A - logLik_null)
likelihood_ratioB <- 2 * (logLik_full_B - logLik_null)
likelihood_ratioC <- 2 * (logLik_full_C - logLik_null)
n <- nrow(data_excluded)
generalized_R2_A <- 1 - exp(-likelihood_ratioA / n)
generalized_R2_B <- 1 - exp(-likelihood_ratioB / n)
generalized_R2_C <- 1 - exp(-likelihood_ratioC / n)
print(paste("Generalized R^2 for Model A:", generalized_R2_A))
print(paste("Generalized R^2 for Model B:", generalized_R2_B))
print(paste("Generalized R^2 for Model C:", generalized_R2_C))
#Tua
# Using cor.test to calculate Kendall's Tau
y_pred_numericA <- predict(modelA, type = "response")
y_true <- data_excluded$TenYearCHD
tau_a <- cor.test(y_pred_numericA, as.numeric(y_true), method="kendall")
y_pred_numericB <- predict(modelB, type = "response")
tau_b <- cor.test(y_pred_numericB, as.numeric(y_true), method="kendall")
y_pred_numericC <- predict(modelC, type = "response")
tau_c <- cor.test(y_pred_numericC, as.numeric(y_true), method="kendall")
print(tau_a$estimate)
print(tau_b$estimate)
print(tau_c$estimate)
#Cindec
roc_resultA <- roc(response=y_true, predictor=y_pred_numericA)
c_indexA <- auc(roc_resultA)
roc_resultB <- roc(response=y_true, predictor=y_pred_numericB)
c_indexB <- auc(roc_resultB)
roc_resultC <- roc(response=y_true, predictor=y_pred_numericC)
c_indexC <- auc(roc_resultC)
print(c_indexA)
print(c_indexB)
print(c_indexC)
tau_a <- cor.test(y_pred_numericA, as.factor(y_true), method="kendall")
tau_a <- cor.test(y_pred_numericA, as.numeric(y_true), method="kendall")
library(DescTools)
y_pred_A <- predict(modelA, type = "response")
y_pred_B <- predict(modelB, type = "response")
y_pred_C <- predict(modelC, type = "response")
y_true <- data_excluded$TenYearCHD
y_true_numeric <- as.numeric(y_true)
gamma_A <- Gamma(y_pred_A, y_true_numeric)
gamma_A <- Gamma(y_pred_A, y_true_numeric)
#Gamma
library(DescTools)
y_pred_A <- predict(modelA, type = "response")
y_pred_B <- predict(modelB, type = "response")
y_pred_C <- predict(modelC, type = "response")
y_true <- data_excluded$TenYearCHD
#y_true_numeric <- as.numeric(y_true)
gamma_A <- Gamma(y_pred_A, y_true_numeric)
gamma_A <- Gamma(y_pred_A)
library(rcompanion)
setwd("/Users/kaiyangqian/Documents/Courses/Biostatistic Method II/Rcode/HW4")
data$male <- as.factor(replace(data$male, data$male == "Male", 1))
data$male <- factor(data$male, levels = c(0, 1), labels = c("Female", "Male"))
data$TenYearCHD <- as.factor(replace(data$TenYearCHD, data$TenYearCHD == "No", 0))
data$TenYearCHD <- factor(data$TenYearCHD, levels = c(0, 1), labels = c("No", "Yes"))
data$currentSmoker <- factor(data$currentSmoker,levels = c(0, 1), labels = c("No", "Yes"))
summary(data)
install.packages("rcompanion")
rows_to_exclude <- which(data$Observation %in% c(1938, 3027))
data_excluded <- data[-rows_to_exclude, ]
model_excluded <- glm(TenYearCHD ~ sysBP, data = data_excluded, family = binomial())
# Model A: TenYearCHD ~ sysBP
modelA <- glm(TenYearCHD ~ sysBP, data = data_excluded, family = binomial())
data <- read.csv("/Users/kaiyangqian/Documents/Courses/Biostatistic Method II/Rcode/HW4/framingham_Homework4.csv")
#data <- na.omit(data)
data$male <- as.factor(replace(data$male, data$male == "Male", 1))
data$male <- factor(data$male, levels = c(0, 1), labels = c("Female", "Male"))
data$TenYearCHD <- as.factor(replace(data$TenYearCHD, data$TenYearCHD == "No", 0))
data$TenYearCHD <- factor(data$TenYearCHD, levels = c(0, 1), labels = c("No", "Yes"))
data$currentSmoker <- factor(data$currentSmoker,levels = c(0, 1), labels = c("No", "Yes"))
summary(data)
model <- glm(TenYearCHD ~ sysBP, data = data, family = binomial())
summary(model)
rows_to_exclude <- which(data$Observation %in% c(1938, 3027))
data_excluded <- data[-rows_to_exclude, ]
model_excluded <- glm(TenYearCHD ~ sysBP, data = data_excluded, family = binomial())
summary(model_excluded)
modelA <- glm(TenYearCHD ~ sysBP, data = data_excluded, family = binomial())
summary(modelA)
# Model B: TenYearCHD ~ sysBP + Age
modelB <- glm(TenYearCHD ~ sysBP + age, data = data_excluded, family = binomial())
summary(modelB)
# Model C: TenYearCHD ~ Age + Sex
# Assuming 'male' is the column representing sex, with 1 for male and 0 for female
modelC <- glm(TenYearCHD ~ age + factor(male), data = data_excluded, family = binomial())
summary(modelC)
# define function to get predictive measures based on what model is input
get_predictive_measures = function(model_of_interest, model_name){
r_squared = rcompanion::nagelkerke(model_of_interest)
tibble(
model = model_name,
aic = AIC(model_of_interest),
bic = BIC(model_of_interest),
gen_Rsq = r_squared$Pseudo.R2[2],
nagel_Rsq = r_squared$Pseudo.R3[3],
somersD = (pROC::auc(model_of_interest$y, model_of_interest$fitted.values))/0.5 - 1,
gamma = DescTools::GoodmanKruskalGamma(model_of_interest$y, model_of_interest$fitted.values),
tauA = DescTools::KendallTauA(model_of_interest$y, model_of_interest$fitted.values),
Cindex = pROC::auc(model_of_interest$y, model_of_interest$fitted.values)
)
}
results_modelA <- get_predictive_measures(modelA, "Model A")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
library(tibble)
# define function to get predictive measures based on what model is input
get_predictive_measures = function(model_of_interest, model_name){
r_squared = rcompanion::nagelkerke(model_of_interest)
tibble(
model = model_name,
aic = AIC(model_of_interest),
bic = BIC(model_of_interest),
gen_Rsq = r_squared$Pseudo.R2[2],
nagel_Rsq = r_squared$Pseudo.R3[3],
somersD = (pROC::auc(model_of_interest$y, model_of_interest$fitted.values))/0.5 - 1,
gamma = DescTools::GoodmanKruskalGamma(model_of_interest$y, model_of_interest$fitted.values),
tauA = DescTools::KendallTauA(model_of_interest$y, model_of_interest$fitted.values),
Cindex = pROC::auc(model_of_interest$y, model_of_interest$fitted.values)
)
}
results_modelA <- get_predictive_measures(modelA, "Model A")
results_modelB <- get_predictive_measures(modelB, "Model B")
results_modelC <- get_predictive_measures(modelC, "Model C")
results_modelA
results_modelA
results_modelB
results_modelC
results_modelA
results_modelB
results_modelC
coef_original <- coef(model)["sysBP"]
coef_excluded <- coef(model_excluded)["sysBP"]
print(paste("Original sysBP Coefficient:", coef_original))
print(paste("Excluded sysBP Coefficient:", coef_excluded))
# Change in coefficient
change_in_coef <- coef_excluded - coef_original
print(paste("Change in sysBP Coefficient:", change_in_coef))
# Assuming 'male' is the column representing sex, with 1 for male and 0 for female
modelC <- glm(TenYearCHD ~ age + factor(male), data = data_excluded, family = binomial())
summary(modelC)
modelC <- glm(TenYearCHD ~ age + factor(male), data = data_excluded, family = binomial())
summary(modelC)
confint(modelC)
exp(confint(modelC))
modelC <- glm(TenYearCHD ~ age + factor(male), data = data_excluded, family = binomial())
summary(modelC)
exp(confint(modelC))
exp(0.05510)
dfbetas <- dfbetas(model)
dfbetas_data <- data.frame(Observation = 1:nrow(data), DFBETAs_sysBP = dfbetas[, 2])
# Plot DFBETAs for the intercept
p1 <- ggplot(dfbetas_data, aes(x = Observation, y = DFBETAs_Intercept)) +
geom_point() +
theme_minimal() +
labs(title = "DFBETAs for Intercept vs. Observation Number",
x = "Observation Number",
y = "DFBETAs for Intercept")
library(ggplot2)
# Plot DFBETAs for the intercept
p1 <- ggplot(dfbetas_data, aes(x = Observation, y = DFBETAs_Intercept)) +
geom_point() +
theme_minimal() +
labs(title = "DFBETAs for Intercept vs. Observation Number",
x = "Observation Number",
y = "DFBETAs for Intercept")
# Plot DFBETAs for the primary predictor (age in this example)
p2 <- ggplot(dfbetas_data, aes(x = Observation, y = DFBETAs_Age)) +
geom_point() +
theme_minimal() +
labs(title = "DFBETAs for Age vs. Observation Number",
x = "Observation Number",
y = "DFBETAs for Age")
# Print the plots
print(p1)
# Plot DFBETAs for the primary predictor (age in this example)
p2 <- ggplot(dfbetas_data, aes(x = Observation, y = DFBETAs_Age)) +
geom_point() +
theme_minimal() +
labs(title = "DFBETAs for Age vs. Observation Number",
x = "Observation Number",
y = "DFBETAs for Age")
print(p2)
rlang::last_trace()
dfbetas_data <- data.frame(Observation = 1:nrow(data), DFBETAs_sysBP = dfbetas[, 2])
dfbetas <- dfbetas(model)
dfbetas_data <- data.frame(Observation = 1:nrow(data), DFBETAs_sysBP = dfbetas[, 2])
# Plot DFBETAs for the intercept
p1 <- ggplot(dfbetas_data, aes(x = Observation, y = DFBETAs_Intercept)) +
geom_point() +
theme_minimal() +
labs(title = "DFBETAs for Intercept vs. Observation Number",
x = "Observation Number",
y = "DFBETAs for Intercept")
# Plot DFBETAs for the primary predictor (age in this example)
p2 <- ggplot(dfbetas_data, aes(x = Observation, y = DFBETAs_Age)) +
geom_point() +
theme_minimal() +
labs(title = "DFBETAs for Age vs. Observation Number",
x = "Observation Number",
y = "DFBETAs for Age")
# Print the plots
print(p1)
# Assuming modelC is your glm model
dfbetas <- dfbetas(modelC)
# Create a data frame for plotting
# Note: Adjust the column indexing in dfbetas[,2] and dfbetas[,3] based on your model's structure
dfbetas_data <- data.frame(Observation = 1:nrow(dfbetas),
DFBETAs_Intercept = dfbetas[, 1],  # Assuming first column is for Intercept
DFBETAs_FirstPredictor = dfbetas[, 2])  # Adjust this index based on your specific model
# Now let's fix the plotting code
library(ggplot2)
# Plot for Intercept
ggplot(dfbetas_data, aes(x = Observation, y = DFBETAs_Intercept)) +
geom_point() +
theme_minimal() +
labs(title = "DFBETAs for Intercept vs. Observation Number",
x = "Observation Number",
y = "DFBETAs for Intercept")
# Plot for the first predictor (adjust the column name if necessary)
ggplot(dfbetas_data, aes(x = Observation, y = DFBETAs_FirstPredictor)) +  # Ensure this matches your dfbetas_data column name
geom_point() +
theme_minimal() +
labs(title = "DFBETAs for First Predictor vs. Observation Number",
x = "Observation Number",
y = "DFBETAs for First Predictor")
library(ggplot2)
ggplot(dfbetas_data, aes(x = Observation, y = DFBETAs_sysBP)) +
geom_point() +
theme_minimal() +
labs(title = "DFBETAs for sysBP vs. Observation Number",
x = "Observation Number",
y = "DFBETAs")
# Assuming modelC is your glm model
dfbetas <- dfbetas(model)
# Create a data frame for plotting
# Note: Adjust the column indexing in dfbetas[,2] and dfbetas[,3] based on your model's structure
dfbetas_data <- data.frame(Observation = 1:nrow(dfbetas),
DFBETAs_Intercept = dfbetas[, 1],  # Assuming first column is for Intercept
DFBETAs_FirstPredictor = dfbetas[, 2])  # Adjust this index based on your specific model
# Now let's fix the plotting code
library(ggplot2)
# Plot for Intercept
ggplot(dfbetas_data, aes(x = Observation, y = DFBETAs_Intercept)) +
geom_point() +
theme_minimal() +
labs(title = "DFBETAs for Intercept vs. Observation Number",
x = "Observation Number",
y = "DFBETAs for Intercept")
# Plot for the first predictor (adjust the column name if necessary)
ggplot(dfbetas_data, aes(x = Observation, y = DFBETAs_FirstPredictor)) +  # Ensure this matches your dfbetas_data column name
geom_point() +
theme_minimal() +
labs(title = "DFBETAs for First Predictor vs. Observation Number",
x = "Observation Number",
y = "DFBETAs for First Predictor")
#2b
dfbetas <- dfbetas(model)
dfbetas_data <- data.frame(Observation = 1:nrow(dfbetas),
DFBETAs_Intercept = dfbetas[, 1],
DFBETAs_sysBP = dfbetas[, 2])
library(ggplot2)
ggplot(dfbetas_data, aes(x = Observation, y = DFBETAs_Intercept)) +
geom_point() +
theme_minimal() +
labs(title = "DFBETAs for Intercept vs. Observation Number",
x = "Observation Number",
y = "DFBETAs for Intercept")
# Plot for the first predictor (adjust the column name if necessary)
ggplot(dfbetas_data, aes(x = Observation, y = DFBETAs_FirstPredictor)) +  # Ensure this matches your dfbetas_data column name
geom_point() +
theme_minimal() +
labs(title = "DFBETAs for sysBP vs. Observation Number",
x = "Observation Number",
y = "DFBETAs for sysBP")
library(ggplot2)
ggplot(dfbetas_data, aes(x = Observation, y = DFBETAs_Intercept)) +
geom_point() +
theme_minimal() +
labs(title = "DFBETAs for Intercept vs. Observation Number",
x = "Observation Number",
y = "DFBETAs for Intercept")
# Plot for the first predictor (adjust the column name if necessary)
ggplot(dfbetas_data, aes(x = Observation, y = DFBETAs_sysBP)) +  # Ensure this matches your dfbetas_data column name
geom_point() +
theme_minimal() +
labs(title = "DFBETAs for sysBP vs. Observation Number",
x = "Observation Number",
y = "DFBETAs for sysBP")
