y = "Average Seizures",
color = "Treatment") +
theme_minimal()
#1b
# Calculate average number of seizures at each time point, grouped by treatment
average_seizures_time_trt <- seizure_long %>%
group_by(time, trt) %>%
summarise(mean_seizures = mean(seizures, na.rm = TRUE), .groups = 'drop')
# Plot
ggplot(average_seizures_time_trt, aes(x = time, y = mean_seizures, group = trt, color = as.factor(trt))) +
geom_line() +
geom_point() +
labs(title = "Average Number of Seizures Over Time by Treatment",
x = "Time Point",
y = "Average Seizures",
color = "Treatment") +
theme_minimal()
data("dietox", package = "geepack")  # Load the seizure dataset
dietox
seizure
pig_residuals = dietox %>%
group_by(Time) %>%
mutate(weekly_mean = mean(Weight)) %>%
ungroup() %>%
mutate(residuals = Weight - weekly_mean) %>%
select(Pig, Time, residuals)
pig_residuals_wide = pig_residuals %>%
pivot_wider(names_from = Time,
names_glue = paste0("week_", "{Time}"),
values_from = residuals) %>%
select(-Pig)
ggpairs(pig_residuals_wide[,1:10])
seizure
seizure_long
seizure_residuals <- seizure_long %>%
group_by(time) %>%
mutate(weekly_mean = mean(seizures)) %>%
ungroup() %>%
mutate(residuals = seizures - weekly_mean) %>%
select(subject_id, time, residuals)
# Pivot the data to wide format for visualization
seizure_residuals_wide <- seizure_residuals %>%
pivot_wider(
names_from = time,
values_from = residuals
)
ggpairs(seizure_residuals_wide)
seizure_long
print(seizure_long, n = 226)
seizure_residuals <- seizure_long %>%
group_by(time) %>%
mutate(weekly_mean = mean(seizures)) %>%
ungroup() %>%
mutate(residuals = seizures - weekly_mean) %>%
select(subject_id, time, residuals)
# Pivot the data to wide format for visualization
seizure_residuals_wide <- seizure_residuals %>%
pivot_wider(
names_from = time,
values_from = residuals
)
ggpairs(seizure_residuals_wide)
seizure_residuals <- seizure_long %>%
group_by(time) %>%
mutate(weekly_mean = mean(seizures)) %>%
ungroup() %>%
mutate(residuals = seizures - weekly_mean) %>%
select(subject_id, time, residuals)
# Pivot the data to wide format for visualization
seizure_residuals_wide <- seizure_residuals %>%
pivot_wider(
names_from = time,
values_from = residuals
)
ggpairs(seizure_residuals_wide[,1:4])
seizure_residuals <- seizure_long %>%
group_by(time) %>%
mutate(weekly_mean = mean(seizures)) %>%
ungroup() %>%
mutate(residuals = seizures - weekly_mean) %>%
select(subject_id, time, residuals)
# Pivot the data to wide format for visualization
seizure_residuals_wide <- seizure_residuals %>%
pivot_wider(
names_from = time,
values_from = residuals
)
ggpairs(seizure_residuals_wide[, 1:4])
table(seizure_long$trt)
#1a
library(tidyverse)
library(tidyr)
library(dplyr)
# Assuming your wide-format dataset is named 'seizure'
# Transform the data to a long format with pivot_longer
seizure_long <- seizure %>%
pivot_longer(
cols = starts_with("y"),
names_to = "time",
names_prefix = "y",
values_to = "seizures"
)
print(seizure_long, n = 226)
# Add an identifier for each row (subject) if you don't already have one
seizure_long <- seizure_long %>%
mutate(subject_id = row_number())
# Examine the structure of the long-format dataset
str(seizure_long)
# Look at the first few rows to ensure the transformation was successful
head(seizure_long)
table(seizure_long$trt)
table(seizure_long$time)
dietox
seizure
seizure_long
# Transform the data to a long format
seizure_long <- seizure %>%
pivot_longer(
cols = starts_with("y"),
names_to = "time",
names_prefix = "y",
values_to = "seizures"
)
# Add an identifier for each subject assuming each has exactly 4 records
seizure_long <- seizure_long %>%
group_by(base, trt, age) %>%  # Assuming base, trt, and age uniquely identify a subject
mutate(subject_id = cur_group_id()) %>%
ungroup()
# Print the long-format dataset to confirm the structure
print(seizure_long, n = 226)
# Examine the structure of the long-format dataset
str(seizure_long)
# Look at the first few rows to ensure the transformation was successful
head(seizure_long)
# Print the long-format dataset to confirm the structure
print(seizure_long, n = 226)
print(seizure_long, n = 226)
print(seizure_long, n = 236)
str(seizure_long)
head(seizure_long)
table(seizure_long$trt)
table(seizure_long$time)
# Transform the data to a long format
seizure_long <- seizure %>%
pivot_longer(
cols = starts_with("y"),
names_to = "time",
names_prefix = "y",
values_to = "seizures"
)
# Add an identifier for each subject assuming each has exactly 4 records
seizure_long <- seizure_long %>%
group_by(base, trt, age) %>%  # Assuming base, trt, and age uniquely identify a subject
mutate(subject_id = cur_group_id()) %>%
ungroup()
# Print the long-format dataset to confirm the structure
print(seizure_long, n = 236)
# Examine the structure of the long-format dataset
str(seizure_long)
# Look at the first few rows to ensure the transformation was successful
head(seizure_long)
table(seizure_long$trt)
table(seizure_long$time)
1b
#1b
# Calculate average number of seizures at each time point, grouped by treatment
average_seizures_time_trt <- seizure_long %>%
group_by(time, trt) %>%
summarise(mean_seizures = mean(seizures, na.rm = TRUE), .groups = 'drop')
# Plot
ggplot(average_seizures_time_trt, aes(x = time, y = mean_seizures, group = trt, color = as.factor(trt))) +
geom_line() +
geom_point() +
labs(title = "Average Number of Seizures Over Time by Treatment",
x = "Time Point",
y = "Average Seizures",
color = "Treatment") +
theme_minimal()
#1c
library(GGally)
seizure_residuals <- seizure_long %>%
group_by(time) %>%
mutate(weekly_mean = mean(seizures)) %>%
ungroup() %>%
mutate(residuals = seizures - weekly_mean) %>%
select(subject_id, time, residuals)
# Pivot the data to wide format for visualization
seizure_residuals_wide <- seizure_residuals %>%
pivot_wider(
names_from = time,
values_from = residuals
)
ggpairs(seizure_residuals_wide[, 1:4])
# Assuming your data frame is named seizure_long
write.csv(seizure_long, "seizure_long.csv", row.names = FALSE)
getwd()
setwd("/Users/kaiyangqian/Documents/Courses/Biostatistic Method II/Rcode/HW8")
write.csv(seizure_long, "seizure_long.csv", row.names = FALSE)
library(dplyr)
library(ggplot2)
# Calculate average number of seizures at each time point, grouped by treatment
average_seizures_time_trt <- seizure_long %>%
group_by(time, trt) %>%
summarise(mean_seizures = mean(seizures, na.rm = TRUE), .groups = 'drop')
# Plot the results
plot <- ggplot(average_seizures_time_trt, aes(x = time, y = mean_seizures, color = as.factor(trt))) +
geom_line() +
geom_point() +
labs(title = "Average Number of Seizures Over Time by Treatment",
x = "Time Point",
y = "Average Seizures",
color = "Treatment") +
theme_minimal()
print(plot)
seizure_long
#1b
# Calculate average number of seizures at each time point, grouped by treatment
average_seizures_time_trt <- seizure_long %>%
group_by(time, trt) %>%
summarise(mean_seizures = mean(seizures, na.rm = TRUE), .groups = 'drop')
# Plot
ggplot(average_seizures_time_trt, aes(x = time, y = mean_seizures, group = trt, color = as.factor(trt))) +
geom_line() +
geom_point() +
labs(title = "Average Number of Seizures Over Time by Treatment",
x = "Time Point",
y = "Average Seizures",
color = "Treatment") +
theme_minimal()
ggplot(seizure_long, aes(x = age, y = seizures, color = as.factor(trt))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Seizures by Age and Treatment", x = "Age", y = "Seizures", color = "Treatment") +
theme_minimal()
seizure_long %>%
ggplot(aes(time, seizures)) +
geom_line(alpha = 0.3, aes(group = subject_id)) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ treatment) +
labs(x = "Time", y = "Seizures")
# Assuming your dataset is named 'seizure_long' and has similar structure
seizure_long %>%
ggplot(aes(time, seizures)) +
geom_line(alpha = 0.3, aes(group = subject_id)) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ trt) +
labs(x = "Time", y = "Seizures")
avg_seizures <- seizure_long %>%
group_by(time, treatment, subject_id) %>%
summarize(mean_seizures = mean(seizures))
avg_seizures <- seizure_long %>%
group_by(time, treatment, subject_id) %>%
summarize(mean_seizures = mean(seizures))
# Plot
# Calculate average number of seizures at each time point grouped by treatment and subject ID
avg_seizures <- seizure_long %>%
group_by(time, trt, subject_id) %>%
summarize(mean_seizures = mean(seizures))
# Plot average seizures over time by treatment
ggplot(avg_seizures, aes(x = time, y = mean_seizures, color = treatment, group = treatment)) +
geom_line() +
geom_point() +
labs(x = "Time", y = "Average Seizures", color = "Treatment") +
theme_minimal()
# Calculate average number of seizures at each time point grouped by treatment and subject ID
avg_seizures <- seizure_long %>%
group_by(time, trt, subject_id) %>%
summarize(mean_seizures = mean(seizures))
# Plot average seizures over time by treatment
ggplot(avg_seizures, aes(x = time, y = mean_seizures, color = trt, group = trt)) +
geom_line() +
geom_point() +
labs(x = "Time", y = "Average Seizures", color = "Treatment") +
theme_minimal()
# Scatter plot of age vs seizures, with trend line separated by treatment
ggplot(seizure_long, aes(x = age, y = seizures, color = trt)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "Age", y = "Seizures", color = "Treatment") +
theme_minimal()
# Assuming your dataset is named 'seizure_long' and has similar structure
seizure_long %>%
ggplot(aes(time, seizures)) +
geom_line(alpha = 0.3, aes(group = subject_id)) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ trt) +
labs(x = "Time", y = "Seizures")
# Plot
ggplot(average_seizures_time_trt, aes(x = time, y = mean_seizures, group = trt, color = as.factor(trt))) +
geom_line() +
geom_point() +
labs(title = "Average Number of Seizures Over Time by Treatment",
x = "Time Point",
y = "Average Seizures",
color = "Treatment") +
theme_minimal()
ggplot(seizure_long, aes(x = age, y = seizures, color = as.factor(trt))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Seizures by Age and Treatment", x = "Age", y = "Seizures", color = "Treatment") +
theme_minimal()
# Calculate average number of seizures at each time point, grouped by treatment
average_seizures_time_trt <- seizure_long %>%
group_by(time, trt) %>%
summarise(mean_seizures = mean(seizures, na.rm = TRUE), .groups = 'drop')
# Plot the results
plot <- ggplot(average_seizures_time_trt, aes(x = time, y = mean_seizures, color = as.factor(trt))) +
geom_line() +
geom_point() +
labs(title = "Average Number of Seizures Over Time by Treatment",
x = "Time Point",
y = "Average Seizures",
color = "Treatment") +
theme_minimal()
print(plot)
# Plot
ggplot(average_seizures_time_trt, aes(x = time, y = mean_seizures, group = trt, color = as.factor(trt))) +
geom_line() +
geom_point() +
labs(title = "Average Number of Seizures Over Time by Treatment",
x = "Time Point",
y = "Average Seizures",
color = "Treatment") +
theme_minimal()
ggplot(seizure_long, aes(x = age, y = seizures, color = as.factor(trt))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Seizures by Age and Treatment", x = "Age", y = "Seizures", color = "Treatment") +
theme_minimal()
seizure_long %>%
ggplot(aes(time, seizures)) +
geom_line(alpha = 0.3, aes(group = subject_id)) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ trt) +
labs(x = "Time", y = "Seizures")
#1c
library(GGally)
seizure_residuals <- seizure_long %>%
group_by(time) %>%
mutate(weekly_mean = mean(seizures)) %>%
ungroup() %>%
mutate(residuals = seizures - weekly_mean) %>%
select(subject_id, time, residuals)
# Pivot the data to wide format for visualization
seizure_residuals_wide <- seizure_residuals %>%
pivot_wider(
names_from = time,
values_from = residuals
)
ggpairs(seizure_residuals_wide[, 1:4])
library(GGally)
seizure_residuals <- seizure_long %>%
group_by(time) %>%
mutate(weekly_mean = mean(seizures)) %>%
ungroup() %>%
mutate(residuals = seizures - weekly_mean) %>%
select(subject_id, time, residuals)
# Pivot the data to wide format for visualization
seizure_residuals_wide <- seizure_residuals %>%
pivot_wider(
names_from = time,
names_glue = paste0("time point","{time}"),
values_from = residuals) %>%
select(-subject_id)
ggpairs(seizure_residuals_wide[, 1:4])
model <- geeglm(seizure_count ~ treatment + age + time,
family = poisson,
data = seizure_long,
id = subject_id,
corstr = "exchangeable")
library(geepack)
model <- geeglm(seizures ~ treatment + age + time,
family = poisson,
data = seizure_long,
id = subject_id,
corstr = "exchangeable")
#2a
library(geepack)
model <- geeglm(seizures ~ trt + age + time,
family = poisson,
data = seizure_long,
id = subject_id,
corstr = "exchangeable")
summary(model)
library(tidyverse)
tidy_output <- broom::tidy(model, exponentiate = TRUE, conf.int = TRUE, conf.level = 0.95)
print(tidy_output)
library(lme4)
poisson_glmm <- glmer(seizures ~ trt + age + time + (1 | subject_id),
family = poisson,
data = seizure_long)
summary(poisson_glmm)
library(lme4)
poisson_glmm <- glmer(seizures ~ trt + age + time + (1 | subject_id),
family = poisson,
data = seizure_long)
summary(poisson_glmm)
#3a
library(lme4)
poisson_glmm <- glmer(seizures ~ trt + age + time + (1 | subject_id),
family = poisson,
data = seizure_long)
summary(poisson_glmm)
tidy_output_p <- broom::tidy(poisson_glmm, exponentiate = TRUE, conf.int = TRUE, conf.level = 0.95)
#3a
library(lme4)
poisson_glmm <- glmer(seizures ~ trt + age + time + (1 | subject_id),
family = poisson,
data = seizure_long)
summary(poisson_glmm)
library(lme4)
poisson_glmm <- glmer(seizures ~ trt + age + time + (1 | subject_id),
family = poisson,
data = seizure_long)
summary(poisson_glmm)
library(broom)
# Get a tidy summary of the model with exponentiated coefficients
tidy_output <- broom::tidy(poisson_glmm, exponentiate = TRUE, conf.int = TRUE, conf.level = 0.95)
install.packages("broom.mixed")
library(broom.mixed)
# Get a tidy summary of the model with exponentiated coefficients
tidy_output <- broom.mixed::tidy(poisson_glmm, exponentiate = TRUE, conf.int = TRUE, conf.level = 0.95)
# Print the tidy summary
print(tidy_output)
tidy_output <- broom::tidy(model, exponentiate = TRUE, conf.int = TRUE, conf.level = 0.95)
print(tidy_output)
#3c
library(broom.mixed)
tidy_output_poisson <- broom.mixed::tidy(poisson_glmm, exponentiate = TRUE, conf.int = TRUE, conf.level = 0.95)
print(tidy_output)
#3b
library(lme4)
poisson_glmm <- glmer(seizures ~ trt + age + time + (1 | subject_id),
family = poisson,
data = seizure_long)
summary(poisson_glmm)
#3c
library(broom.mixed)
tidy_output_poisson <- broom.mixed::tidy(poisson_glmm, exponentiate = TRUE, conf.int = TRUE, conf.level = 0.95)
print(tidy_output)
tidy_output <- broom::tidy(model, exponentiate = TRUE, conf.int = TRUE, conf.level = 0.95)
print(tidy_output)
library(geepack)
model <- geeglm(seizures ~ trt + age + time,
family = poisson,
data = seizure_long,
id = subject_id,
corstr = "exchangeable")
summary(model)
library(lme4)
poisson_glmm <- glmer(seizures ~ trt + age + time + (1 | subject_id),
family = poisson,
data = seizure_long)
summary(poisson_glmm)
confint(poisson_glmm)
fixef_poisson_glmm <- fixef(poisson_glmm)
# Exponentiate the fixed effect coefficients
exp_fixef_poisson_glmm <- exp(fixef_poisson_glmm)
# Print the exponentiated coefficients
print(exp_fixef_poisson_glmm)
#3c
fixef_poisson_glmm <- fixef(poisson_glmm)
exp_fixef_poisson_glmm <- exp(fixef_poisson_glmm)
print(exp_fixef_poisson_glmm)
confint(poisson_glmm)
tidy_output <- broom::tidy(model, exponentiate = TRUE, conf.int = TRUE, conf.level = 0.95)
print(tidy_output)
fixef_poisson_glmm <- fixef(poisson_glmm)
exp_fixef_poisson_glmm <- exp(fixef_poisson_glmm)
print(exp_fixef_poisson_glmm)
confint(poisson_glmm)
summary(poisson_glmm)
fixef_poisson_glmm <- fixef(poisson_glmm)
exp_fixef_poisson_glmm <- exp(fixef_poisson_glmm)
print(exp_fixef_poisson_glmm)
conf_int_log <- confint(poisson_glmm)
conf_int_exp <- exp(conf_int_log)
print(conf_int_exp)
summary(poisson_glmm)
#3d
# Calculate Pearson residuals
residuals <- residuals(poisson_glmm, type = "pearson")
# Calculate the sum of squared Pearson residuals
pearson_chi_square <- sum(residuals^2)
# Calculate the degrees of freedom
df_resid <- df.residual(poisson_glmm)
# Ratio of Pearson Chi-Square to Degrees of Freedom
overdispersion_statistic <- pearson_chi_square / df_resid
# Print the statistic
print(overdispersion_statistic)
install.packages("AER")
library(AER)
# Assuming your model is a GLM or similar
# If you are using a GLMM, ensure that the object can be handled or adapted to fit the expected input
disp_test <- dispersiontest(poisson_glmm, trafo = 1)  # `trafo = 1` specifies no transformation, meaning it tests the Poisson assumption
install.packages("DHARMa")library(AER)
install.packages("DHARMa")
library(DHARMa)
# Simulate residuals
simulationOutput <- simulateResiduals(fittedModel = poisson_glmm)
# Plot the residuals
plot(simulationOutput)
# Perform a test for overdispersion
testOverdispersion(simulationOutput)
library(performance)
overdispersion_result <- check_overdispersion(poisson_model)
overdispersion_result <- check_overdispersion(poisson_glmm)
print(overdispersion_result)
#3d
library(performance)
overdispersion_result <- check_overdispersion(poisson_glmm)
print(overdispersion_result)
