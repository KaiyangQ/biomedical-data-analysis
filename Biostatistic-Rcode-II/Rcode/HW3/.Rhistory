effect_size <- 0.5
sd <- 1.5
size <- 30
a5 <- effect_size/(sd/sqrt(size)) - 1.96
a5
dd <- pnorm(a5)
dd
effect_size <- 1.5
sd <- 1.5
size <- 30
a5 <- effect_size/(sd/sqrt(size)) - 1.96
a5
dd <- pnorm(a5)
dd
effect_size <- 0.5
sd <- 1.5
size <- 30
a5 <- effect_size/(sd/sqrt(size)) - 1.96
a5
dd <- pnorm(a5)
dd
effect_size <- 1.5
sd <- 1.5
size <- 30
a5 <- effect_size/(sd/sqrt(size)) - 1.96
a5
dd <- pnorm(a5)
dd
effect_size <- 1
sd <- 1.5
size <- 30
a5 <- effect_size/(sd/sqrt(size)) - 1.96
a5
dd <- pnorm(a5)
dd
effect_size <- 2
sd <- 1.5
size <- 30
a5 <- effect_size/(sd/sqrt(size)) - 1.96
a5
dd <- pnorm(a5)
dd
effect_size <- 0.5
sd <- 1.5
size <- 30
a5 <- effect_size/(sd/sqrt(size)) - 1.96
a5
dd <- pnorm(a5)
dd
effect_size <- 1
sd <- 1.5
size <- 30
a5 <- effect_size/(sd/sqrt(size)) - 1.96
a5
dd <- pnorm(a5)
dd
# Set working path
getwd()
setwd("/Users/kaiyangqian/Documents/Courses/Biostatistic Method II/Rcode/HW2")
library(readr)
titanic_df <- read_csv("Titanic.csv")
titanic_df$Sex <- ifelse(titanic_df$Sex == "female", 0, 1)
titanic_df$Pclass <- as.factor(titanic_df$Pclass)
model <- glm(Survived ~ Sex + Age + Pclass, data = titanic_df, family = binomial)
summary(model)
confint_model <- confint(model)
print(confint_model)
new_passenger <- data.frame(Sex = 0,
Age = 17,
Pclass = factor(3, levels = c(1, 2, 3)))
predicted_probability <- predict(model, newdata = new_passenger, type = "response")
print(predicted_probability)
new_passenger <- data.frame(Sex = 1,
Age = 51,
Pclass = factor(2, levels = c(1, 2, 3)))
predicted_probability <- predict(model, newdata = new_passenger, type = "response")
print(predicted_probability)
coef_age <- coef(model)["Age"]
se_age <- summary(model)$coefficients["Age", "Std. Error"]
or_age_10yr <- exp(coef_age * 10)
z_value <- 1.96
ci_lower <- exp((coef_age - z_value * se_age) * 10)
ci_upper <- exp((coef_age + z_value * se_age) * 10)
cat("Odds Ratio for a 10-year increase in age:", or_age_10yr, "\n")
cat("95% CI for OR:", ci_lower, "-", ci_upper, "\n")
getwd()
setwd("/Users/kaiyangqian/Documents/Courses/Biostatistic Method II/Rcode/HW3")
# Set working path
getwd()
# Assuming your data is loaded into a dataframe called byssinosis_data
byssinosis_data <- read.csv("byssinosis.csv")
# Convert factors to numeric as necessary
byssinosis_data$smoke <- as.numeric(factor(byssinosis_data$smoke))
byssinosis_data$byss <- as.numeric(factor(byssinosis_data$byss))
# Unadjusted logistic regression
model_unadjusted <- glm(byss ~ smoke, data = byssinosis_data, family = "binomial")
# Assuming your data is loaded into a dataframe called byssinosis_data
byssinosis_data <- read.csv("byssinosis.csv")
# Convert factors to numeric as necessary
byssinosis_data$smoke <- as.numeric(factor(byssinosis_data$smoke))
byssinosis_data$byss <- as.numeric(factor(byssinosis_data$byss))
# Unadjusted logistic regression
model_unadjusted <- glm(byss ~ smoke, data = byssinosis_data, family = "binomial")
# Assuming your data is loaded into a dataframe called byssinosis_data
byssinosis_data <- read.csv("byssinosis.csv")
# Unadjusted logistic regression
model_unadjusted <- glm(byss ~ smoke, data = byssinosis_data, family = "binomial")
# Assuming your data is loaded into a dataframe called byssinosis_data
byssinosis_data <- read.csv("byssinosis.csv")
# Unadjusted logistic regression
model_unadjusted <- glm(byss ~ smoke, data = byssinosis_data, family = "binomial")
byssinosis_data$smoke <- factor(byssinosis_data$smoke, levels = c("Non-Smoker", "Smoker"))
byssinosis_data$byss <- factor(byssinosis_data$byss, levels = c("No", "Yes"))
# Unadjusted logistic regression
model_unadjusted <- glm(byss ~ smoke, data = byssinosis_data, family = "binomial")
# Assuming your data is loaded into a dataframe called byssinosis_data
byssinosis_data <- read.csv("byssinosis.csv")
# Unadjusted logistic regression
model_unadjusted <- glm(byss ~ as.factor(smoke), data = byssinosis_data, family = "binomial")
# Assuming your data is loaded into a dataframe called byssinosis_data
byssinosis_data <- read.csv("byssinosis.csv")
byssinosis_data$smoke <- factor(byssinosis_data$smoke, levels = c("Non-Smoker", "Smoker"))
byssinosis_data$byss <- factor(byssinosis_data$byss, levels = c("No", "Yes"))
# Unadjusted logistic regression
model_unadjusted <- glm(byss ~ as.factor(smoke), data = byssinosis_data, family = "binomial")
# Assuming your data is loaded into a dataframe called byssinosis_data
byssinosis_data <- read.csv("byssinosis.csv")
byssinosis_data$smoke <- factor(byssinosis_data$smoke, levels = c("Non-Smoker", "Smoker"))
byssinosis_data$byss <- factor(byssinosis_data$byss, levels = c("No", "Yes"))
# Unadjusted logistic regression
model_unadjusted <- glm(byss ~ as.factor(smoke), data = byssinosis_data, family = "binomial")
# Assuming your data is loaded into a dataframe called byssinosis_data
byssinosis_data <- read.csv("byssinosis.csv")
byssinosis_data$smoke <- factor(byssinosis_data$smoke, levels = c("Non-Smoker", "Smoker"))
byssinosis_data$byss <- factor(byssinosis_data$byss, levels = c("No", "Yes"))
# Convert 'byss' to a binary numeric format
byssinosis_data$byss_numeric <- as.numeric(byssinosis_data$byss) - 1
# Unadjusted logistic regression
model_unadjusted <- glm(byss ~ as.factor(smoke), data = byssinosis_data, family = "binomial")
# Assuming your data is loaded into a dataframe called byssinosis_data
byssinosis_data <- read.csv("byssinosis.csv")
# Ensure 'smoke' and 'byss' are factors with two levels
byssinosis_data$smoke <- factor(byssinosis_data$smoke, levels = c("Non-Smoker", "Smoker"))
byssinosis_data$byss <- factor(byssinosis_data$byss, levels = c("No", "Yes"))
# Convert 'byss' to a binary numeric format
byssinosis_data$byss_numeric <- as.numeric(byssinosis_data$byss) - 1
# Unadjusted logistic regression using the numeric binary format for 'byss'
model_unadjusted <- glm(byss_numeric ~ smoke, data = byssinosis_data, family = "binomial")
# Load the dataset
byssinosis_data <- read.csv("byssinosis.csv")
# Check the levels of 'smoke' and 'byss' to ensure they have the expected categories
table(byssinosis_data$smoke)
table(byssinosis_data$byss)
# Convert 'smoke' to a factor with explicit levels
byssinosis_data$smoke <- factor(byssinosis_data$smoke, levels = c("Non-Smoker", "Smoker"))
# Convert 'byss' to a binary outcome (0 and 1) and then to a factor
byssinosis_data$byss_binary <- ifelse(byssinosis_data$byss == "Yes", 1, 0)
byssinosis_data$byss_binary <- factor(byssinosis_data$byss_binary, levels = c(0, 1))
# Logistic regression using the binary outcome for 'byss'
model_unadjusted <- glm(byss_binary ~ smoke, data = byssinosis_data, family = "binomial")
# Check the levels of 'smoke' and 'byss' to ensure they have the expected categories
table(byssinosis_data$smoke)
table(byssinosis_data$byss)
# Load the dataset
byssinosis_data <- read.csv("byssinosis.csv")
# Logistic regression using the binary outcome for 'byss'
model_unadjusted <- glm(byss ~ smoke, data = byssinosis_data, family = "binomial")
# Logistic regression using the binary outcome for 'byss'
model_unadjusted <- glm(byss ~ as.factor(smoke), data = byssinosis_data, family = "binomial")
# Logistic regression using the binary outcome for 'byss'
model_unadjusted <- glm(as.factor(byss) ~ as.factor(smoke), data = byssinosis_data, family = "binomial")
summary(model_unadjusted)
# Logistic regression using the binary outcome for 'byss'
model_unadjusted <- glm(as.factor(byss) ~ as.factor(smoke), data = byssinosis_data, family = "binomial")
summary(model_unadjusted)
# Calculate and interpret odds ratio for smokers
exp(coef(model_unadjusted)["smokeSmoker"])
confint(model_unadjusted, level = 0.95)
# Calculate and interpret odds ratio for smokers
exp(coef(model_unadjusted)["smokeSmoker"])
confint(model_unadjusted, level = 0.95)
byssinosis_data <- read.csv("byssinosis.csv")
model_unadjusted <- glm(as.factor(byss) ~ as.factor(smoke), data = byssinosis_data, family = "binomial")
summary(model_unadjusted)
confint(model_unadjusted, level = 0.95)
confint(model_unadjusted, level = 0.95)
# b
model_adjusted <- glm(as.factor(byss) ~ as.factor(smoke) + as.factor(expose), data = byssinosis_data, family = "binomial")
summary(model_adjusted)
model_adjusted <- glm(as.factor(byss) ~ as.factor(smoke) + as.factor(expose), data = byssinosis_data, family = "binomial")
summary(model_adjusted)
confint(model_adjusted, level = 0.95)
#c
model_covirate <- glm(as.factor(smoke) ~ as.factor(expose), data = byssinosis_data, family = "binomial")
summary(model_adjusted)
model_adjusted <- glm(as.factor(byss) ~ as.factor(smoke) + as.factor(expose), data = byssinosis_data, family = "binomial")
summary(model_adjusted)
model_covirate <- glm(as.factor(smoke) ~ as.factor(expose), data = byssinosis_data, family = "binomial")
summary(model_adjusted)
# Set working path
getwd()
setwd("/Users/kaiyangqian/Documents/Courses/Biostatistic Method II/Rcode/HW3")
byssinosis_data <- read.csv("byssinosis.csv")
# b
model_adjusted <- glm(as.factor(byss) ~ as.factor(smoke) + as.factor(expose), data = byssinosis_data, family = "binomial")
summary(model_adjusted)
model_covirate <- glm(as.factor(smoke) ~ as.factor(expose), data = byssinosis_data, family = "binomial")
summary(model_covirate)
model_covariate <- glm(as.factor(smoke) ~ as.factor(expose), data = byssinosis_data, family = "binomial")
summary(model_covariate)
#c
model_covariate <- glm(as.factor(smoke) ~ as.factor(expose), data = byssinosis_data, family = "binomial")
summary(model_covariate)
#c
model_covariate <- glm(as.factor(smoke) ~ as.factor(expose), data = byssinosis_data, family = "binomial")
summary(model_covariate)
model_covariate <- glm(as.factor(expose) ~ as.factor(smoke), data = byssinosis_data, family = "binomial")
summary(model_covariate)
#e
# Logistic regression with interaction term
model_interaction <- glm(byss ~ smoke + expose + byssinosis_data$smoke * byssinosis_data$expose, data = byssinosis_data, family = "binomial")
#e
# Logistic regression with interaction term
model_interaction <- glm(as.factor(byss) ~ as.factor(smoke) + as.factor(expose) + byssinosis_data$smoke * byssinosis_data$expose, data = byssinosis_data, family = "binomial")
summary(model_interaction)
#e
byssinosis_data$smoke_expose_interaction <- with(byssinosis_data, as.factor(smoke) * as.factor(expose))
# Logistic regression with interaction term
model_interaction <- glm(as.factor(byss) ~ as.factor(smoke) + as.factor(expose) + byssinosis_data$smoke_expose_interaction, data = byssinosis_data, family = "binomial")
byssinosis_data$smoke_expose_interaction <- with(byssinosis_data, as.factor(smoke) * as.factor(expose))
#e
byssinosis_data$smoke_dust_interaction <- byssinosis_data$smoke * byssinosis_data$expose
byssinosis_data$smoke_dust_interaction <- byssinosis_data$smoke * byssinosis_data$expose
# Logistic regression with interaction term
model_interaction <- glm(as.factor(byss) ~ as.factor(smoke) + as.factor(expose) + byssinosis_data$smoke * byssinosis_data$expose, data = byssinosis_data, family = "binomial")
summary(model_interaction)
byssinosis_data$smoke_expose_interaction <- byssinosis_data$smoke * byssinosis_data$expose
byssinosis_data$smoke <- as.factor(byssinosis_data$smoke)
byssinosis_data$expose <- as.factor(byssinosis_data$expose)
model_interaction <- glm(as.factor(byss) ~ as.factor(smoke) + as.factor(expose) + byssinosis_data$smoke * byssinosis_data$expose, data = byssinosis_data, family = "binomial")
summary(model_interaction)
#e
byssinosis_data$smoke <- as.factor(byssinosis_data$smoke)
byssinosis_data$expose <- as.factor(byssinosis_data$expose)
# Logistic regression with interaction term
model_interaction <- glm(as.factor(byss) ~ as.factor(smoke) + as.factor(expose) + byssinosis_data$smoke * byssinosis_data$expose, data = byssinosis_data, family = "binomial")
summary(model_interaction)
#e
# Logistic regression with interaction term
model_interaction <- glm(as.factor(byss) ~ as.factor(smoke) + as.factor(expose) + byssinosis_data$smoke * byssinosis_data$expose, data = byssinosis_data, family = "binomial")
summary(model_interaction)
# Interpret odds ratio for interaction term
exp(coef(model_interaction)["smoke_dust_interaction"])
confint(model_interaction)["smoke_dust_interaction",]
# Logistic regression with interaction term
model_interaction <- glm(as.factor(byss) ~ as.factor(smoke) + as.factor(expose) + byssinosis_data$smoke * byssinosis_data$expose, data = byssinosis_data, family = "binomial")
summary(model_interaction)
# Ensure 'smoke' and 'expose' are factors
byssinosis_data$smoke <- as.factor(byssinosis_data$smoke)
byssinosis_data$expose <- as.factor(byssinosis_data$expose)
# Logistic regression with interaction term, correctly specified
model_interaction <- glm(as.factor(byss) ~ smoke + expose + smoke:expose,
data = byssinosis_data, family = "binomial")
summary(model_interaction)
# Interpret odds ratio for interaction term
exp(coef(model_interaction)["smoke_dust_interaction"])
confint(model_interaction)["smoke_dust_interaction",]
getwd()
setwd("/Users/kaiyangqian/Documents/Courses/Biostatistic Method II/Rcode/HW3")
byssinosis_data <- read.csv("byssinosis.csv")
# Logistic regression with interaction term, correctly specified
model_interaction <- glm(as.factor(byss) ~ smoke + expose + smoke:expose,
data = byssinosis_data, family = "binomial")
summary(model_interaction)
# Interpret odds ratio for interaction term
exp(coef(model_interaction)["smoke_dust_interaction"])
confint(model_interaction)["smoke_dust_interaction",]
Interpret odds ratio for interaction term
# Interpret odds ratio for interaction term
exp(coef(model_interaction)["smokeSmoker:exposeYes"])
confint(model_interaction)["smokeSmoker:exposeYes",]
# Extract the names of the coefficients from the model
coef_names <- names(coef(model_interaction))
# Print out the names to find the interaction term
print(coef_names)
# Logistic regression with interaction term, correctly specified
model_interaction <- glm(as.factor(byss) ~ smoke + expose + smoke:expose,
data = byssinosis_data, family = "binomial")
summary(model_interaction)
#e
# Logistic regression with interaction term, correctly specified
model_interaction <- glm(as.factor(byss) ~ as.factor(smoke) + as.factor(expose) + smoke:expose,
data = byssinosis_data, family = "binomial")
summary(model_interaction)
# Logistic regression with interaction term, correctly specified
model_interaction <- glm(as.factor(byss) ~ as.factor(smoke) + as.factor(expose) + smoke:expose,
data = byssinosis_data, family = "binomial")
summary(model_interaction)
#e
# Logistic regression with interaction term, correctly specified
model_interaction <- glm(byss ~ smoke + expose + smoke:expose,
data = byssinosis_data, family = "binomial")
# Logistic regression with interaction term, correctly specified
model_interaction <- glm(byss ~ as.factor(smoke) + as.factor(expose) + smoke:expose,
data = byssinosis_data, family = "binomial")
#e
# Logistic regression with interaction term, correctly specified
model_interaction <- glm(as.factor(byss) ~ smoke + expose + smoke:expose,
data = byssinosis_data, family = "binomial")
summary(model_interaction)
# If necessary, use the profile method to calculate the confidence intervals
conf_int_interaction_profile <- confint(model_interaction, method = "profile")["smokeSmoker:exposeYes", ]
# Print the confidence interval obtained through profiling
print(conf_int_interaction_profile)
# Calculate the odds ratio for the interaction term
odds_ratio_interaction <- exp(coef(model_interaction)["smokeSmoker:exposeYes"])
# Print the odds ratio for the interaction term
print(odds_ratio_interaction)
# Calculate the odds ratio for the interaction term
odds_ratio_interaction <- exp(coef(model_interaction)["smokeSmoker:exposeYes"])
# Print the odds ratio for the interaction term
print(odds_ratio_interaction)
# Logistic regression with interaction term, correctly specified
model_interaction <- glm(as.factor(byss) ~ smoke + expose + smoke:expose,
data = byssinosis_data, family = "binomial")
summary(model_interaction)
ds ratio for smokers unexposed to dust
# Odds ratio for smokers unexposed to dust
odds_ratio_smokers_unexposed <- exp(coef(model_interaction)["smokeSmoker"])
# Confidence interval for smokers unexposed to dust
conf_int_smokers_unexposed <- exp(confint(model_interaction)["smokeSmoker", ])
# Calculate the odds ratio for smokers unexposed to dust
odds_ratio_smokers_unexposed <- exp(coef(model_interaction)["smokeSmoker"])
# Print the odds ratio for smokers unexposed to dust
print(odds_ratio_smokers_unexposed)
# Calculate the confidence interval for the coefficient
# Note: If the profile method is needed, it may take some time to compute.
conf_int_smokers_unexposed <- confint(model_interaction)["smokeSmoker", ]
# Print the confidence interval for the coefficient of smokers unexposed to dust
print(conf_int_smokers_unexposed)
# Calculate the odds ratio for smokers unexposed to dust
odds_ratio_smokers_unexposed <- exp(coef(model_interaction)["smokeSmoker"])
# Print the odds ratio for smokers unexposed to dust
print(odds_ratio_smokers_unexposed)
# Note: If the profile method is needed, it may take some time to compute.
conf_int_smokers_unexposed <- confint(model_interaction)["smokeSmoker", ]
# Print the confidence interval for the coefficient of smokers unexposed to dust
print(conf_int_smokers_unexposed)
# Note: If the profile method is needed, it may take some time to compute.
conf_int_smokers_unexposed <- exp(confint(model_interaction)["smokeSmoker", ])
# Print the confidence interval for the coefficient of smokers unexposed to dust
print(conf_int_smokers_unexposed)
# Calculate the odds ratio for smokers unexposed to dust
odds_ratio_smokers_unexposed <- exp(coef(model_interaction)["smokeSmoker"])
# Print the odds ratio for smokers unexposed to dust
print(odds_ratio_smokers_unexposed)
odds_ratio_smokers_unexposed <- exp(coef(model_interaction)["smokeSmoker"])
print(odds_ratio_smokers_unexposed)
conf_int_smokers_unexposed <- exp(confint(model_interaction)["smokeSmoker", ])
print(conf_int_smokers_unexposed)
#expopsed
combined_odds_ratio_smokers_exposed <- exp(coef(model_interaction)["smokeSmoker"] + coef(model_interaction)["smokeSmoker:exposeYes"])
conf_int_smokers_exposed <- exp(confint(model_interaction, method = "profile")[c("smokeSmoker", "smokeSmoker:exposeYes"), ])
#expopsed
combined_odds_ratio_smokers_exposed <- exp(coef(model_interaction)["smokeSmoker"] + coef(model_interaction)["smokeSmoker:exposeYes"])
print(combined_odds_ratio_smokers_exposed)
conf_int_smokers_exposed <- exp(confint(model_interaction, method = "profile")[c("smokeSmoker", "smokeSmoker:exposeYes"), ])
print(conf_int_smokers_exposed)
combined_odds_ratio_smokers_exposed <- exp(coef(model_interaction)["smokeSmoker"] + coef(model_interaction)["smokeSmoker:exposeYes"])
print(combined_odds_ratio_smokers_exposed)
conf_int_smokers_exposed <- exp(confint(model_interaction)[c("smokeSmoker", "smokeSmoker:exposeYes"), ])
print(conf_int_smokers_exposed)
model_interaction <- glm(as.factor(byss) ~ smoke + expose + smoke:expose,
data = byssinosis_data, family = "binomial")
summary(model_interaction)
#e
# Logistic regression with interaction term, correctly specified
model_interaction <- glm(as.factor(byss) ~ smoke + expose + smoke:expose,
data = byssinosis_data, family = "binomial")
summary(model_interaction)
conf_int_smokers_exposed <- exp(confint(model_interaction)[c("smokeSmoker", "smokeSmoker:exposeYes"), ])
print(conf_int_smokers_exposed)
#expopsed
combined_odds_ratio_smokers_exposed <- exp(coef(model_interaction)["smokeSmoker"] + coef(model_interaction)["smokeSmoker:exposeYes"])
print(combined_odds_ratio_smokers_exposed)
#expopsed
combined_odds_ratio_smokers_exposed <- exp(coef(model_interaction)["smokeSmoker"] + coef(model_interaction)["exposeYes"] + coef(model_interaction)["smokeSmoker:exposeYes"])
print(combined_odds_ratio_smokers_exposed)
conf_int_smokers_exposed <- exp(confint(model_interaction)[c("smokeSmoker", "exposeYes","smokeSmoker:exposeYes"), ])
print(conf_int_smokers_exposed)
exp_coef <- exp(coef(model_interaction))
exp_confint <- exp(confint(model_interaction))
# Print the odds ratios and their 95% CI
print(exp_coef)
print(exp_confint)
#expopsed
combined_odds_ratio_smokers_exposed <- exp(coef(model_interaction)["smokeSmoker"] + coef(model_interaction)["exposeYes"] + coef(model_interaction)["smokeSmoker:exposeYes"])
print(combined_odds_ratio_smokers_exposed)
exp_confint <- exp(confint(model_interaction))
exp_confint <- exp(confint(model_interaction))
print(exp_confint)
#expopsed
combined_odds_ratio_smokers_exposed <- exp(coef(model_interaction)["smokeSmoker"] + coef(model_interaction)["exposeYes"] + coef(model_interaction)["smokeSmoker:exposeYes"])
print(combined_odds_ratio_smokers_exposed)
# Logistic regression with interaction term, correctly specified
model_interaction <- glm(as.factor(byss) ~ smoke + expose + smoke:expose,
data = byssinosis_data, family = "binomial")
summary(model_interaction)
combined_odds_ratio_smokers_exposed <- exp(coef(model_interaction)["smokeSmoker"] + coef(model_interaction)["smokeSmoker:exposeYes"])
print(combined_odds_ratio_smokers_exposed)
conf_int_smokers_exposed <- exp(confint(model_interaction)[c("smokeSmoker", "smokeSmoker:exposeYes"), ])
print(conf_int_smokers_exposed)
#exposed
combined_odds_ratio_smokers_exposed <- exp(coef(model_interaction)["smokeSmoker"] + coef(model_interaction)["smokeSmoker:exposeYes"])
print(combined_odds_ratio_smokers_exposed)
conf_int_smokers_exposed <- exp(confint(model_interaction))
print(conf_int_smokers_exposed)
#exposed
combined_odds_ratio_smokers_exposed <- exp(coef(model_interaction)["smokeSmoker"] + coef(model_interaction)["smokeSmoker:exposeYes"])
print(combined_odds_ratio_smokers_exposed)
conf_int_smokers_exposed <- exp(confint(model_interaction))
print(conf_int_smokers_exposed)
# Logistic regression with interaction term, correctly specified
model_interaction <- glm(as.factor(byss) ~ smoke + expose + smoke:expose,
data = byssinosis_data, family = "binomial")
summary(model_interaction)
conf_int_smokers_exposed <- exp(confint(model_interaction))
print(conf_int_smokers_exposed)
# Load necessary package
library(stats)
# 1. Intercept Only Model
model_intercept <- glm(dbyss ~ 1, family = binomial(), data = byssinosis_data)
# Calculate -2 Log Likelihood
minus2_log_likelihood_intercept <- -2 * logLik(model_intercept)
# 2. Model with Smoking Status as the Only Predictor
model_smoking <- glm(dbyss ~ smoker, family = binomial(), data = byssinosis_data)
# Calculate -2 Log Likelihood
minus2_log_likelihood_smoking <- -2 * logLik(model_smoking)
# 3. Model with Smoking Status and Dust Exposure as the Predictors
model_smoke_dust <- glm(dbyss ~ smoker + dust, family = binomial(), data = byssinosis_data)
# Calculate -2 Log Likelihood
minus2_log_likelihood_smoke_dust <- -2 * logLik(model_smoke_dust)
# Print the -2 Log Likelihood values
print(paste("-2 Log Likelihood for Intercept Only Model:", minus2_log_likelihood_intercept))
print(paste("-2 Log Likelihood for Model with Smoking Status:", minus2_log_likelihood_smoking))
print(paste("-2 Log Likelihood for Model with Smoking Status and Dust Exposure:", minus2_log_likelihood_smoke_dust))
print(paste("-2 Log Likelihood for Intercept Only Model:", minus2_log_likelihood_intercept))
# 1. Intercept Only Model
model_intercept <- glm(dbyss ~ 1, family = binomial(), data = byssinosis_data)
# Calculate -2 Log Likelihood
minus2_log_likelihood_intercept <- -2 * logLik(model_intercept)
print(paste("-2 Log Likelihood for Intercept Only Model:", minus2_log_likelihood_intercept))
# 2. Model with Smoking Status as the Only Predictor
model_smoking <- glm(dbyss ~ smoker, family = binomial(), data = byssinosis_data)
# Calculate -2 Log Likelihood
minus2_log_likelihood_smoking <- -2 * logLik(model_smoking)
print(paste("-2 Log Likelihood for Model with Smoking Status:", minus2_log_likelihood_smoking))
# 3. Model with Smoking Status and Dust Exposure as the Predictors
model_smoke_dust <- glm(dbyss ~ smoker + dust, family = binomial(), data = byssinosis_data)
# Calculate -2 Log Likelihood
minus2_log_likelihood_smoke_dust <- -2 * logLik(model_smoke_dust)
print(paste("-2 Log Likelihood for Model with Smoking Status and Dust Exposure:", minus2_log_likelihood_smoke_dust))
# 1. Intercept Only Model
model_intercept <- glm(dbyss ~ 1, family = binomial(), data = byssinosis_data)
minus2_log_likelihood_intercept <- -2 * logLik(model_intercept)
print(paste("-2 Log Likelihood for Intercept Only Model:", minus2_log_likelihood_intercept))
# 2. Model with Smoking Status as the Only Predictor
model_smoking <- glm(dbyss ~ smoker, family = binomial(), data = byssinosis_data)
minus2_log_likelihood_smoking <- -2 * logLik(model_smoking)
print(paste("-2 Log Likelihood for Model with Smoking Status:", minus2_log_likelihood_smoking))
# 3. Model with Smoking Status and Dust Exposure as the Predictors
model_smoke_dust <- glm(dbyss ~ smoker + dust, family = binomial(), data = byssinosis_data)
minus2_log_likelihood_smoke_dust <- -2 * logLik(model_smoke_dust)
print(paste("-2 Log Likelihood for Model with Smoking Status and Dust Exposure:", minus2_log_likelihood_smoke_dust))
minus2_log_likelihood_smoke_dust11 <- -2 * logLik(model_adjusted)
minus2_log_likelihood_smoke_dust11
#4
# Calculate the likelihood ratio test statistic
lrt_statistic <- -2 * (logLik(model_smoking) - logLik(model_smoke_dust))
# Degrees of freedom is the difference in number of parameters between the models
# Assuming 'smoker' and 'dust' are the only predictors and not considering interaction terms or other covariates,
# the degrees of freedom for the LRT is 1 (2 predictors in the complex model - 1 predictor in the simpler model)
df <- 1
# Calculate the p-value
p_value <- pchisq(lrt_statistic, df, lower.tail = FALSE)
# Print the LRT statistic and the p-value
print(paste("Likelihood Ratio Test Statistic:", lrt_statistic))
print(paste("P-value:", p_value))
df <- length(coef(model_smoking)) - length(coef(model_smoke_dust))
df
lrt_statistic <- -2 * (logLik(model_smoking) - logLik(model_smoke_dust))
df <- length(coef(model_smoke_dust)) - length(coef(model_smoking))
p_value <- pchisq(lrt_statistic, df, lower.tail = FALSE)
# Print the LRT statistic and the p-value
print("Likelihood Ratio Test Statistic:" + lrt_statistic)
lrt_statistic <- -2 * (logLik(model_smoking) - logLik(model_smoke_dust))
df <- length(coef(model_smoke_dust)) - length(coef(model_smoking))
p_value <- pchisq(lrt_statistic, df, lower.tail = FALSE)
print("Likelihood Ratio Test Statistic:" + lrt_statistic)
#4
lrt_statistic <- -2 * (logLik(model_smoking) - logLik(model_smoke_dust))
df <- length(coef(model_smoke_dust)) - length(coef(model_smoking))
p_value <- pchisq(lrt_statistic, df, lower.tail = FALSE)
print(paste("Likelihood Ratio Test Statistic:", lrt_statistic))
print(paste("P-value:", p_value))
anova(model_smoking,model_smoke_dust,test = 'LRT')
anova(model_intercept,model_smoke_dust,test = 'LRT')
#f
lrt_statistic <- 1213.318 - 1210.808
p_value <- pchisq(lrt_statistic, df = 1, lower.tail = FALSE)
print(paste("LRT Statistic:", lrt_statistic))
print(paste("P-value:", p_value))
